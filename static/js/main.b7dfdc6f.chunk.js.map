{"version":3,"sources":["data/store.js","data/actions.js","data/actionTypes.js","data/reducers.js","components/ChatHeader.js","components/Chats.js","components/Topics.js","App.js","serviceWorker.js","index.js"],"names":["socket","postMessage","from","id","message","topicId","type","payload","INIT_CHANNEL","name","combineReducers","reducer","state","channels","currentChannel","chats","user","action","1","2","messageTopicId","sender","messageId","messages","filter","channel","userName","logger","store","next","console","log","result","getState","url","window","location","hostname","io","on","msg","updateChat","createStore","applyMiddleware","thunk","configureStore","sendMessage","value","emit","dispatch","connect","setUser","Date","getTime","toString","updateUser","props","useState","setUserName","useEffect","document","querySelector","addEventListener","closeModal","hideRenameModal","style","display","e","target","className","TextField","label","onChange","Button","variant","color","onClick","length","selectedTopic","getChats","setChats","List","aria-label","dense","ListItem","ListItemText","map","chat","key","topics","getTopics","setCurrentTopic","setTopics","component","topic","button","primary","selectedTopicId","postChat","setMessage","Grid","container","spacing","item","xs","Paper","paddingRight","paddingLeft","multiline","IconButton","Boolean","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b7dfdc6f.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport io from 'socket.io-client';\n\nimport { postMessage } from './actions';\nimport reducer from './reducers';\n\nconst logger = (store) => (next) => (action) => {\n  console.log('dispatching', action);\n  let result = next(action);\n  console.log('next state', store.getState());\n  return result;\n};\n\nlet socket;\n\nconst configureStore = () => {\n  if (!socket) {\n    let url = window.location.hostname === 'localhost'\n      ? ':3001'\n      : 'https://madi-chats.herokuapp.com/';\n    socket = io(url);\n\n    socket.on('chat message', msg => {\n      let {\n        id,\n        message,\n        topicId,\n        userName,\n      } = msg;\n\n      updateChat(userName, id, message, topicId);\n    });\n  }\n\n  return createStore(reducer, applyMiddleware(logger, thunk));\n};\n\nlet store = configureStore();\n\nconst sendMessage = (value) => {\n  socket.emit('chat message', value);\n}\n\nconst updateChat = (userName, id, message, topicId) => {\n  store.dispatch(postMessage(userName, id, message, topicId));\n};\n\nexport {\n  store,\n  sendMessage,\n};\n","import { sendMessage } from './store';\n\nimport {\n  GET_CHANNELS,\n  GET_CHATS,\n  POST_MESSAGE,\n  SET_CURRENT_CHANNEL,\n  SET_USER,\n} from './actionTypes';\n\nexport const getChannels = () => {\n  return {\n    type: GET_CHANNELS,\n  };\n};\n\nexport const setCurrentChannel = (channelId) => {\n  return {\n    type: SET_CURRENT_CHANNEL,\n    payload: channelId,\n  };\n};\n\nexport const getChats = () => {\n  return {\n    type: GET_CHATS,\n  };\n};\n\nexport const postChat = (from, message, topicId) => {\n  return (dispatch) => {\n    let id = `MSG_${new Date().getTime().toString(36)}`;\n\n    // emit the message to the server for broadcasting\n    sendMessage({\n      id,\n      message,\n      topicId,\n      userName: from,\n    });\n\n    dispatch(postMessage(from, id, message, topicId));\n  };\n};\n\nexport const postMessage = (from, id, message, topicId) => {\n  return {\n    type: POST_MESSAGE,\n    payload: {\n      id,\n      message,\n      from,\n      topicId,\n    },\n  };\n};\n\nexport const setUser = () => {\n  return {\n    type: SET_USER,\n    payload: {\n      userName: `User_${new Date().getTime().toString(36)}`,\n    },\n  };\n};\n\nexport const updateUser = (userName) => {\n  return {\n    type: SET_USER,\n    payload: {\n      userName,\n    },\n  };\n};\n","export const GET_CHANNELS = 'GET_CHANNELS';\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\n\nexport const GET_CHATS = 'GET_CHATS';\n\nexport const POST_MESSAGE = 'POST_MESSAGE';\n\nexport const SET_USER = 'SET_USER';\n","import { combineReducers } from 'redux';\n\nimport {\n  GET_CHANNELS,\n  GET_CHATS,\n  POST_MESSAGE,\n  SET_CURRENT_CHANNEL,\n  SET_USER,\n} from './actionTypes';\n\nconst INIT_CHANNEL = {\n  id: 1,\n  name: 'general',\n};\n\nconst reducer = (\n  state = {\n    channels: [INIT_CHANNEL],\n    currentChannel: INIT_CHANNEL,\n    chats: [],\n    user: { name: '' },\n  },\n  action\n) => {\n  switch (action.type) {\n    case GET_CHANNELS:\n      let channels = [\n        ...state.channels,\n        {\n          id: 1,\n          name: 'general',\n        },\n        {\n          id: 2,\n          name: 'personal',\n        },\n      ];\n\n      return {\n        ...state,\n        channels,\n      };\n    case GET_CHATS:\n      let chats = {\n        1: [\n          {\n            id: 1,\n            from: 'Mathioli',\n            topicId: 1,\n            message: 'Hello',\n          },\n          {\n            id: 2,\n            from: 'Sruthi',\n            topicId: 1,\n            message: 'Hi',\n          },\n        ],\n        2: [\n          {\n            id: 1,\n            from: 'Mathioli',\n            topicId: 2,\n            message: 'Oui',\n          },\n          {\n            id: 2,\n            from: 'Sruthi',\n            topicId: 2,\n            message: 'Hi',\n          },\n        ],\n      };\n\n      return {\n        ...state,\n        chats,\n      };\n    case POST_MESSAGE:\n      let messageTopicId = action.payload.topicId;\n      let message = action.payload.message;\n      let sender = action.payload.from;\n      let messageId = action.payload.id;\n\n      let messages = { ...state.chats };\n\n      if (!messages[messageTopicId]) {\n        messages[messageTopicId] = [];\n      }\n\n      messages[messageTopicId] = [\n        ...messages[messageTopicId],\n        {\n          id: messageId,\n          from: sender,\n          topicId: messageTopicId,\n          message,\n        },\n      ];\n\n      return {\n        ...state,\n        chats: messages,\n      };\n    case SET_CURRENT_CHANNEL:\n      let currentChannel = state.channels.filter(\n        (channel) => channel.id === action.payload\n      );\n\n      return {\n        ...state,\n        currentChannel: currentChannel[0],\n      };\n    case SET_USER:\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          name: action.payload.userName,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  reducer,\n});\n","import Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { setUser, updateUser } from '../data/actions';\n\nconst ChatHeader = props => {\n  const [userName, setUserName] = useState('');\n  \n  useEffect(() => {\n    props.setUser();\n    document.querySelector('.backdrop').addEventListener('click', closeModal);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setUserName(props.userName);\n  }, [props.userName]);\n\n  const handleChange = e => {\n    setUserName(e.target.value);\n  }\n\n  const displayRenameModal = () => {\n    document.querySelector('.backdrop').style.display = 'flex';\n  };\n\n  const hideRenameModal = () => {\n    document.querySelector('.backdrop').style.display = 'none';\n  };\n\n  const closeModal = e => {\n    if (e.target === document.querySelector('.backdrop')) {\n      hideRenameModal();\n    }\n  }\n\n  const updateUserName = () => {\n    if (userName.length !== 0) {\n      props.updateUser(userName);\n    }\n\n    hideRenameModal();\n  };\n\n  return (\n    <div className='chatHeader'>\n      <div className='backdrop'>\n        <div className='renameModal'>\n          <TextField\n            className='userNameInput'\n            label='Enter your name here...'\n            value={userName}\n            onChange={handleChange}\n          />\n          <Button\n            variant='contained'\n            color='primary'\n            onClick={updateUserName}\n          >\n            OK\n          </Button>\n        </div>\n      </div>\n      <h3>Chats</h3>\n      <h4\n        onClick={displayRenameModal}\n      >\n        {`Hello, ${userName}`}\n      </h4>\n      <p>(Click the username to update it)</p>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setUser: () => dispatch(setUser()),\n  updateUser: (userName) => dispatch(updateUser(userName)),\n});\n\nconst mapStateToProps = state => ({\n  userName: state.reducer.user.name,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatHeader);\n","import List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { getChats } from '../data/actions';\n\nimport '../App.css';\n\nconst Chats = (props) => {\n  let [chats, setChats] = useState([]);\n\n  // useEffect(() => {\n  //   props.getChats();\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, []);\n\n  useEffect(() => {\n    let messages = props.chats[props.selectedTopic.id] || [];\n\n    setChats(messages);\n  }, [props.chats, props.selectedTopic]);\n\n  return (\n    <List aria-label='Chat messages' className='chatText' dense>\n      {chats.length === 0 && (\n        <ListItem>\n          <ListItemText className='noChats'>\n            This is the first conversation in this topic\n          </ListItemText>\n        </ListItem>\n      )}\n      {chats.map((chat) => {\n        return (\n          <ListItem key={chat.id}>\n            <ListItemText>\n              <span className='sender'>{chat.from}</span>\n              &nbsp;\n              {chat.message}\n            </ListItemText>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getChats: () => dispatch(getChats()),\n});\n\nconst mapStateToProps = (state) => ({\n  chats: state.reducer.chats,\n  selectedTopic: state.reducer.currentChannel,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chats);\n","import List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport '../App.css';\n\nimport {\n  getChannels,\n  setCurrentChannel,\n} from '../data/actions';\n\nconst Topics = props => {\n  let [topics, setTopics] = useState([]);\n  \n  // useEffect(() => {\n  //   props.getTopics();\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, []);\n\n  useEffect(() => {\n    setTopics(props.topics);\n  }, [props.topics]);\n\n  return (\n    <List\n      className='chatText'\n      component='nav'\n      dense\n      aria-label='Chat topics'\n    >\n      {\n        topics.map(topic => {\n          return (\n            <ListItem\n              className={`${props.selectedTopic.id === topic.id ? 'activeTopic' : ''}`}\n              key={topic.id}\n              button\n              onClick={() => props.setCurrentTopic(topic.id)}\n            >\n              <ListItemText\n                primary={topic.name}\n              />\n            </ListItem>\n          );\n        })\n      }\n    </List>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getTopics: () => dispatch(getChannels()),\n  setCurrentTopic: (id) => dispatch(setCurrentChannel(id)),\n});\n\nconst mapStateToProps = state => ({\n  topics: state.reducer.channels,\n  selectedTopic: state.reducer.currentChannel,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Topics);\n","import Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport SendIcon from '@material-ui/icons/Send';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport ChatHeader from './components/ChatHeader';\nimport Chats from './components/Chats';\nimport Topics from './components/Topics';\n\nimport { postChat } from './data/actions';\n\nimport './App.css';\n\nimport 'fontsource-roboto';\n\nfunction App(props) {\n  const [message, setMessage] = useState('');\n\n  const handleChange = (e) => {\n    setMessage(e.target.value);\n  };\n\n  const sendMessage = () => {\n    props.postMessage(props.selectedTopicId, message, props.userName);\n\n    setMessage('');\n  };\n\n  return (\n    <div className='root'>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Paper className='paper'>\n            <ChatHeader />\n          </Paper>\n        </Grid>\n        <Grid item xs={3} style={{ paddingRight: 0 }}>\n          <Paper className='paper topicWindow'>\n            <Topics />\n          </Paper>\n        </Grid>\n        <Grid item xs={9} style={{ paddingLeft: 0 }}>\n          <Paper className='paper chatWindow'>\n            <Chats />\n          </Paper>\n        </Grid>\n        <Grid className='footer' item xs={12}>\n          <Paper className='paper messageInputContainer'>\n            <TextField\n              className='messageInput'\n              label='Enter message here...'\n              multiline\n              variant='filled'\n              value={message}\n              onChange={handleChange}\n            />\n            <IconButton\n              aria-label='send message'\n              color='primary'\n              onClick={sendMessage}\n            >\n              <SendIcon />\n            </IconButton>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  postMessage: (topicId, message, from) =>\n    dispatch(postChat(from, message, topicId)),\n});\n\nconst mapStateToProps = (state) => ({\n  selectedTopicId: state.reducer.currentChannel.id,\n  userName: state.reducer.user.name,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './data/store';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}